{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_ownerIndex","type":"uint8"},{"name":"_newOwner","type":"address"}],"name":"changeOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"suggest","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_data","type":"bytes"},{"name":"_salt","type":"uint256"}],"name":"checkHash","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_data","type":"bytes"}],"name":"suggestRevealAndApprove","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_byteCode","type":"bytes"},{"name":"_salt","type":"bytes32"}],"name":"createSmartContract2","outputs":[{"name":"_contractAddress","type":"address"},{"name":"_returnedData","type":"bytes"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"uint256"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_data","type":"bytes"},{"name":"_salt","type":"uint256"}],"name":"execute","outputs":[{"name":"_status","type":"bool"},{"name":"_returnedData","type":"bytes"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_data","type":"bytes"}],"name":"suggestAndReveal","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_data","type":"bytes"}],"name":"suggestApproveAndExecute","outputs":[{"name":"_status","type":"bool"},{"name":"_returnedData","type":"bytes"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"uint256"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_data","type":"bytes"},{"name":"_salt","type":"uint256"}],"name":"approveAndExecute","outputs":[{"name":"_status","type":"bool"},{"name":"_returnedData","type":"bytes"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"isApproved","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"suggestAndApprove","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"hashOf","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_index","type":"uint8"}],"name":"getOwnerAt","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_approvalsRequired","type":"uint8"}],"name":"setApprovalsRequired","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"uint256"}],"name":"cancelSuggestion","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_data","type":"bytes"},{"name":"_salt","type":"uint256"}],"name":"calculateHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"approvalsCount","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"uint256"}],"name":"revokeApproval","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"ownersCount","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"uint256"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_data","type":"bytes"},{"name":"_salt","type":"uint256"}],"name":"reveal","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"},{"name":"_owner","type":"address"}],"name":"isApprovedBy","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_byteCode","type":"bytes"}],"name":"createSmartContract","outputs":[{"name":"_contractAddress","type":"address"},{"name":"_returnedData","type":"bytes"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"approvalsRequired","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"data","type":"bytes"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"hash","type":"bytes32"}],"name":"Suggestion","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"},{"indexed":false,"name":"data","type":"bytes"},{"indexed":false,"name":"salt","type":"uint256"}],"name":"Revelation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":true,"name":"owner","type":"address"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":true,"name":"owner","type":"address"}],"name":"ApprovalRevocation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":true,"name":"owner","type":"address"},{"indexed":false,"name":"status","type":"bool"},{"indexed":false,"name":"returnedData","type":"bytes"}],"name":"Execution","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"contractAddress","type":"address"},{"indexed":false,"name":"returnedData","type":"bytes"}],"name":"SmartContractCreation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"ownerIndex","type":"uint8"},{"indexed":true,"name":"oldOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnerChange","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"newApprovalsRequired","type":"uint8"}],"name":"ApprovalsRequiredChange","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"}],"name":"SuggestionCancellation","type":"event"}],"devdoc":{"methods":{"approvalsCount(uint256)":{"params":{"_id":"ID of the suggested transaction to get number of approvals for\r"},"return":"number of approvals collected for suggested transaction with given\r        ID\r"},"approve(uint256)":{"params":{"_id":"ID of the suggested transaction to be approved\r"}},"approveAndExecute(uint256,address,uint256,bytes,uint256)":{"params":{"_data":"transaction data\r","_id":"ID of the suggested transaction to approve and execute\r","_salt":"salt used to calculate transaction hash\r","_to":"transaction destination\r","_value":"transaction value\r"},"return":"transaction execution status and returned data\r"},"calculateHash(address,uint256,bytes,uint256)":{"params":{"_data":"transaction data\r","_salt":"salt to use for hash calculation\r","_to":"transaction destination address\r","_value":"transaction value\r"},"return":"transaction hash\r"},"cancelSuggestion(uint256)":{"params":{"_id":"ID of the suggested transaction to be cancelled\r"}},"changeOwner(uint8,address)":{"params":{"_newOwner":"address of the new owner\r","_ownerIndex":"index of the owner to be replaced\r"}},"checkHash(uint256,address,uint256,bytes,uint256)":{"params":{"_data":"transaction data\r","_id":"ID of the suggested transaction to check index for\r","_salt":"salt to use for hash calculation\r","_to":"transaction destination address\r","_value":"transaction value\r"},"return":"true if hash of suggested transaction with given ID matches\r             transaction parameters provided, false otherwise\r"},"createSmartContract(bytes)":{"params":{"_byteCode":"byte code to create smart contract with\r"},"return":"created smart contract address and data returned by smart contract\r        creation\r"},"createSmartContract2(bytes,bytes32)":{"params":{"_byteCode":"byte code to create smart contract with\r","_salt":"salt to use for generating smart contract address\r"},"return":"created smart contract address and data returned by smart contract\r        creation\r"},"execute(uint256,address,uint256,bytes,uint256)":{"params":{"_data":"data of the transaction\r","_id":"ID of the suggested transaction to be executed\r","_salt":"salt used to calculate transaction hash\r","_to":"destination address of the transaction\r","_value":"value of the transaction\r"},"return":"transaction execution status and returned data\r"},"getOwnerAt(uint8)":{"params":{"_index":"index to get address of the owner at\r"},"return":"address of the owner with given index or zero if there is no owner\r        with such index\r"},"hashOf(uint256)":{"params":{"_id":"ID of the suggested transaction to get hash of parameters for\r"},"return":"hash of parameters of suggested transaction with given ID\r"},"isApproved(uint256)":{"params":{"_id":"ID of the suggested transaction to check\r"},"return":"true if suggested transaction with given ID has collected enough\r        approvals to be executed, false otherwise\r"},"isApprovedBy(uint256,address)":{"params":{"_id":"ID of the suggested transaction to check approval for\r","_owner":"owner to check approval by\r"},"return":"true if given owner has approved suggested transaction with given\r        ID, false otherwise\r"},"reveal(uint256,address,uint256,bytes,uint256)":{"params":{"_data":"data of the transaction\r","_id":"ID of the suggested transaction to reveal parameters of\r","_salt":"salt used to calculate transaction hash\r","_to":"destination address of the transaction\r","_value":"value of the transaction\r"}},"revokeApproval(uint256)":{"params":{"_id":"ID of the suggested transaction to revoke approval for\r"}},"setApprovalsRequired(uint8)":{"params":{"_approvalsRequired":"new number of approvals required\r"}},"suggest(bytes32)":{"params":{"_hash":"hash of the transaction to be suggested\r"},"return":"ID of the suggestion created\r"},"suggestAndApprove(bytes32)":{"params":{"_hash":"hash of transaction parameters\r"},"return":"ID of the suggestion created\r"},"suggestAndReveal(address,uint256,bytes)":{"params":{"_data":"transaction data\r","_to":"transaction destination\r","_value":"transaction value\r"},"return":"ID of the suggestion created\r"},"suggestApproveAndExecute(address,uint256,bytes)":{"params":{"_data":"transaction data\r","_to":"transaction destination\r","_value":"transaction value\r"},"return":"transaction execution status and returned data\r"},"suggestRevealAndApprove(address,uint256,bytes)":{"params":{"_data":"transaction data\r","_to":"transaction destination\r","_value":"transaction value\r"},"return":"ID of the suggestion created\r"}}},"userdoc":{"methods":{"approvalsCount(uint256)":{"notice":"Get number of approvals already collected for suggested transaction with\r given ID.\r "},"approve(uint256)":{"notice":"Approve suggested transaction with given ID.\r "},"approveAndExecute(uint256,address,uint256,bytes,uint256)":{"notice":"Approve transaction and execute it.\r "},"calculateHash(address,uint256,bytes,uint256)":{"notice":"Calculate hash of transaction with given parameters.\r "},"cancelSuggestion(uint256)":{"notice":"Cancel transaction suggestion.\r "},"changeOwner(uint8,address)":{"notice":"Replace existing owner with given index with given new owner.  If there is\r no owner with given index, add new owner at given index.  If given new\r owner address is zero, remove owner with given index.\r "},"checkHash(uint256,address,uint256,bytes,uint256)":{"notice":"Check hash of suggested transaction with given ID.\r "},"constructor":"Create new ABDK Multisig Wallet smart contract and make msg.sender to be\r the only owner of it.  The number of required approvals is set to one.\r","createSmartContract(bytes)":{"notice":"Create smart contract with given byte code.\r "},"createSmartContract2(bytes,bytes32)":{"notice":"Create smart contract using CREATE2 opcode with given byte code and salt.\r "},"execute(uint256,address,uint256,bytes,uint256)":{"notice":"Execute suggested transaction with given ID and parameters.\r "},"getOwnerAt(uint8)":{"notice":"Get address of the owner with given index.\r "},"hashOf(uint256)":{"notice":"Get hash of parameters of suggested transaction with given ID.\r "},"isApproved(uint256)":{"notice":"Tell whether suggested transaction with given ID has collected enough\r approvals to be executed.\r "},"isApprovedBy(uint256,address)":{"notice":"Tell whether given owner has approved suggested transaction with given ID.\r "},"reveal(uint256,address,uint256,bytes,uint256)":{"notice":"Reveal parameters of suggested transaction with given ID.\r "},"revokeApproval(uint256)":{"notice":"Revoke approval for suggested transaction with given ID.\r "},"setApprovalsRequired(uint8)":{"notice":"Set number of approvals required to execute transaction.\r "},"suggest(bytes32)":{"notice":"Suggest transaction with given hash to be executed.\r "},"suggestAndApprove(bytes32)":{"notice":"Suggest transaction with given hash to be executed and approve this\r transaction.\r "},"suggestAndReveal(address,uint256,bytes)":{"notice":"Suggest transaction to be executed and reveal its parameters.\r "},"suggestApproveAndExecute(address,uint256,bytes)":{"notice":"Suggest transaction with given hash to be executed, approve this\r transaction, and execute it.\r "},"suggestRevealAndApprove(address,uint256,bytes)":{"notice":"Suggest transaction to be executed, reveal its parameters, and approve the\r transaction.\r "}},"notice":"ABDK Multisig Wallet smart contract allows multiple (up to 255) parties to\r collectively own an Ethereum address.  This address may be used to securely\r store ether and to execute Ethereum transactions once approved by certain\r number of owners.\r"}},"settings":{"compilationTarget":{"./src/sol/ABDKMultisigWallet.sol":"ABDKMultisigWallet"},"evmVersion":"petersburg","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"./src/sol/ABDKMultisigWallet.sol":{"keccak256":"0xa25314bcc98c8efe1e34c4c4b407285ac5db9915e68f82cea967670e6e5947e1","urls":["bzzr://ec473cf95f20b805c1d69f96120c4a826faebf024bb606c9339a2a2189079ee0"]}},"version":1}